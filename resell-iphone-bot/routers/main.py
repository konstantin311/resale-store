import aiohttp
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from loguru import logger
import os
import json
import time
import asyncio
from datetime import datetime

from states.item import Edit, Add
from templates.item import get_item_menu, view_item_menu
from templates.main import (
    main_menu,
    get_users_ads,
    get_ads,
    get_main_menu,
    get_ads_with_filters,
    get_filter_menu,
    get_all_items,
    contact_keyboard
)
from aiogram.fsm.state import State, StatesGroup
from states import register
from config import API_HOST, BOT_USERNAME

router = Router()

class ItemStates(StatesGroup):
    name = State()
    price = State()
    description = State()
    city = State()
    contacts = State()
    photo = State()

class CategoryStates(StatesGroup):
    adding_name = State()
    editing_name = State()
    editing_category_id = State()
    editing_user_id = State()

@router.message(Command("start"))
async def send_welcome(message: Message, state: FSMContext) -> None:
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(None)
    await state.clear()
    
    try:
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with session.get(f"{API_HOST}/api/api/users/telegram/{message.from_user.id}/exists") as exists_response:
                if exists_response.status == 200:
                    exists = await exists_response.json()
                    if exists:
                        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
                        async with session.get(f"{API_HOST}/api/api/users/telegram/{message.from_user.id}/id") as id_response:
                            if id_response.status == 200:
                                user_id = await id_response.json()
                                async with session.get(f"{API_HOST}/api/api/users/{user_id}") as user_response:
                                    if user_response.status == 200:
                                        user_data = await user_response.json()
                                        role = user_data.get("role", {}).get("name", "buyer")
                                        await message.answer(
                                            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá",
                                            reply_markup=await main_menu(role=role),
                                        )
                                        return
                    else:
                        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
                        logger.info(f"User:{message.from_user.id} Command: /start - New user")
                        await message.answer(
                            "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                            reply_markup=await contact_keyboard(),
                        )
                        await state.set_state(register.Register.CONTACT)
    except Exception as e:
        logger.error(f"Error in send_welcome: {str(e)}")
        await message.answer(
            text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=await contact_keyboard(),
        )
        await state.set_state(register.Register.CONTACT)

@router.callback_query(lambda c: c.data.startswith("pay_order_"))
async def pay_order(callback_query: CallbackQuery, state: FSMContext) -> None:
    order_id = int(callback_query.data.split("_")[2])
    
    try:
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
            async with session.get(f"{API_HOST}/api/api/orders/{order_id}") as response:
                if response.status != 200:
                    error_text = await response.text()
                    logger.error(f"Error getting order data: {error_text}")
                    await callback_query.message.answer(
                        text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                    return
                order_data = await response.json()
                
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –Æ–∫–∞—Å—Å—É
            yookassa_data = {
                "amount": {
                    "value": str(order_data["total"]),
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": f"https://t.me/{BOT_USERNAME}?start=payment_{order_id}"
                },
                "capture": True,
                "description": f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id}",
                "metadata": {
                    "order_id": order_id,
                    "telegram_id": callback_query.from_user.id
                }
            }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            idempotence_key = f"order_{order_id}_{int(time.time())}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –Æ–∫–∞—Å—Å—É
            async with session.post(
                "https://api.yookassa.ru/v3/payments",
                json=yookassa_data,
                headers={"Idempotence-Key": idempotence_key},
                auth=aiohttp.BasicAuth(
                    login=os.getenv("YOOKASSA_SHOP_ID"),
                    password=os.getenv("YOOKASSA_SECRET_KEY")
                )
            ) as response:
                if response.status != 200:
                    error_text = await response.text()
                    logger.error(f"Error creating Yookassa payment: {error_text}")
                    await callback_query.message.answer(
                        text="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞",
                        show_alert=True
                    )
                    return
                
                payment = await response.json()
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
                                url=payment["confirmation"]["confirmation_url"]
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã",
                                callback_data=f"check_payment_{order_id}"
                            )
                        ]
                    ]
                )
                
                await callback_query.message.edit_text(
                    text=f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {order_data['total']}\n"
                         f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.\n"
                         f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã'.",
                    reply_markup=keyboard
                )
    except Exception as e:
        logger.error(f"Error in pay_order: {str(e)}")
        await callback_query.message.answer(
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    return

@router.callback_query(lambda c: c.data.startswith("check_payment_"))
async def check_payment(callback_query: CallbackQuery, state: FSMContext) -> None:
    order_id = int(callback_query.data.split("_")[2])
    logger.info(f"Checking payment status for order {order_id}")
    
    try:
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
            async with session.get(f"{API_HOST}/api/api/orders/{order_id}") as order_response:
                if order_response.status != 200:
                    error_text = await order_response.text()
                    logger.error(f"Error getting order data: {error_text}")
                    await callback_query.message.answer(
                        text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
                    )
                    return
                order_data = await order_response.json()
                logger.info(f"Retrieved order data: {order_data}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            if order_data["status"] == "PAID":
                await callback_query.message.edit_text(
                    text="‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É.\n"
                         "–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –ø—Ä–æ–¥–∞–≤–µ—Ü –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                    callback_data="back_to_menu"
                                )
                            ]
                        ]
                    )
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞",
                                callback_data=f"check_payment_{order_id}"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                callback_data="back_to_menu"
                            )
                        ]
                    ]
                )
                
                await callback_query.message.edit_text(
                    text="‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.\n"
                         "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã.",
                    reply_markup=keyboard
                )
    except Exception as e:
        logger.error(f"Error checking payment status: {e}")
        await callback_query.message.answer(
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )

@router.callback_query(F.data == "show_filters")
async def show_filters(callback_query: CallbackQuery, state: FSMContext):
    logger.info("Show filters button pressed")
    await callback_query.message.edit_text(
        text="üîç –§–∏–ª—å—Ç—Ä—ã",
        reply_markup=await get_filter_menu()
    )

@router.callback_query(lambda c: c.data.startswith("view_item_"))
async def view_item(callback_query: CallbackQuery, state: FSMContext):
    item_id = int(callback_query.data.split("_")[2])
    logger.info(f"Trying to view item with ID: {item_id} from {API_HOST}/api/api/items/{item_id}")
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_HOST}/api/api/items/{item_id}") as response:
            logger.info(f"Response status: {response.status}")
            if response.status == 200:
                item = await response.json()
                logger.info(f"Received item data: {item}")
                if "image" in item and item["image"]:
                    item["image"] = item["image"].split("/api/")[-1]
                await state.set_data(item)
                await view_item_menu(
                    callback_query, state, photo=item.get("photo")
                )
            else:
                error_text = await response.text()
                logger.error(f"Error getting item: {error_text}")
                await callback_query.bot.answer_callback_query(
                    callback_query.id,
                    text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ",
                    show_alert=True,
                )

def get_status_text(status: str) -> str:
    status_map = {
        "CREATED": "–°–æ–∑–¥–∞–Ω",
        "PAID": "–û–ø–ª–∞—á–µ–Ω"
    }
    return status_map.get(status, status)

@router.callback_query(lambda c: c.data == "my_orders_buyer")
async def show_buyer_orders(callback_query: CallbackQuery, state: FSMContext):
    try:
        logger.info(f"Starting show_buyer_orders for user {callback_query.from_user.id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_message = await callback_query.message.edit_text(
            "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤...",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        )
        
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
            logger.info(f"Requesting user ID for telegram_id: {callback_query.from_user.id}")
            async with session.get(f"{API_HOST}/api/api/users/telegram/{callback_query.from_user.id}/id") as response:
                if response.status != 200:
                    error_text = await response.text()
                    logger.error(f"Failed to get user ID. Status: {response.status}, Error: {error_text}")
                    await loading_message.edit_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
                    )
                    return
                user_id = await response.json()
                logger.info(f"Got user ID: {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            orders_url = f"{API_HOST}/api/api/orders/user/{user_id}?is_buyer=true"
            logger.info(f"Requesting orders from: {orders_url}")
            
            async with session.get(orders_url) as response:
                response_text = await response.text()
                logger.info(f"Orders API response: {response_text}")
                
                if response.status == 200:
                    try:
                        orders = await response.json()
                        logger.info(f"Parsed orders: {orders}")
                        
                        if not orders:
                            logger.info("No orders found for user")
                            await loading_message.edit_text(
                                "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.",
                                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
                            )
                            return
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
                        orders_text = "üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
                        for order in orders:
                            logger.info(f"Processing order: {order}")
                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                            item_url = f"{API_HOST}/api/api/items/{order['item_id']}"
                            logger.info(f"Requesting item info from: {item_url}")
                            
                            async with session.get(item_url) as item_response:
                                item_data = None
                                if item_response.status == 200:
                                    item_data = await item_response.json()
                                    logger.info(f"Got item data: {item_data}")
                                
                            orders_text += (
                                f"üÜî –ó–∞–∫–∞–∑ #{order['id']}\n"
                                f"üì± –¢–æ–≤–∞—Ä: {item_data['name'] if item_data else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'}\n"
                                f"üí∞ –°—É–º–º–∞: {order['total']} RUB\n"
                                f"üìä –°—Ç–∞—Ç—É—Å: {get_status_text(order['status'])}\n"
                                f"üìÖ –î–∞—Ç–∞: {order['created_at']}\n"
                                f"üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order['delivery_address']}\n"
                                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–æ–¥–∞–≤—Ü–∞: {order['seller_phone']}\n\n"
                            )
                        
                        logger.info(f"Final orders text: {orders_text}")
                        await loading_message.edit_text(
                            orders_text,
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
                        )
                    except Exception as e:
                        logger.error(f"Error processing orders: {str(e)}")
                        await loading_message.edit_text(
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
                        )
                else:
                    error_text = await response.text()
                    logger.error(f"Failed to get orders. Status: {response.status}, Error: {error_text}")
                    await loading_message.edit_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
                    )
    except Exception as e:
        logger.error(f"Error in show_buyer_orders: {str(e)}")
        await loading_message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        )

@router.callback_query(lambda c: c.data == "my_orders_seller")
async def show_seller_orders(callback_query: CallbackQuery, state: FSMContext):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_message = await callback_query.message.edit_text(
            "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤...",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        )
        
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
            async with session.get(f"{API_HOST}/api/api/users/telegram/{callback_query.from_user.id}/id") as response:
                if response.status != 200:
                    await loading_message.edit_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
                    )
                    return
                user_id = await response.json()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞
            orders_url = f"{API_HOST}/api/api/orders/user/{user_id}?is_buyer=false"
            logger.info(f"Requesting orders from: {orders_url}")
            
            async with session.get(orders_url) as response:
                if response.status == 200:
                    orders = await response.json()
                    
                    if not orders:
                        await loading_message.edit_text(
                            "üõçÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞.",
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
                        )
                        return
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
                    orders_text = "üõçÔ∏è –ó–∞–∫–∞–∑—ã –Ω–∞ –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n\n"
                    for order in orders:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                        async with session.get(f"{API_HOST}/api/api/items/{order['item_id']}") as item_response:
                            item_data = await item_response.json() if item_response.status == 200 else None
                            
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ
                        async with session.get(f"{API_HOST}/api/api/users/{order['buyer_id']}") as buyer_response:
                            buyer_data = await buyer_response.json() if buyer_response.status == 200 else None
                            
                        orders_text += (
                            f"üÜî –ó–∞–∫–∞–∑ #{order['id']}\n"
                            f"üì± –¢–æ–≤–∞—Ä: {item_data['name'] if item_data else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'}\n"
                            f"üí∞ –°—É–º–º–∞: {order['total']} RUB\n"
                            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{buyer_data['username'] if buyer_data and buyer_data.get('username') else 'ID ' + str(order['buyer_id'])}\n"
                            f"üìä –°—Ç–∞—Ç—É—Å: {get_status_text(order['status'])}\n"
                            f"üìÖ –î–∞—Ç–∞: {order['created_at']}\n"
                            f"üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order['delivery_address']}\n"
                            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {order['buyer_phone']}\n\n"
                        )
                    
                    await loading_message.edit_text(
                        orders_text,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
                    )
                else:
                    error_text = await response.text()
                    logger.error(f"Failed to get orders. Status: {response.status}, Error: {error_text}")
                    await loading_message.edit_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
                    )
    except Exception as e:
        logger.error(f"Error in show_seller_orders: {e}")
        await loading_message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        )

@router.callback_query(lambda c: c.data not in [
    "my_orders_buyer",
    "my_orders_seller",
    "show_statistics",
    "manage_categories",
    "add_category",
    "edit_category",
    "delete_category",
    "manage_users",
    "change_user_role"
] and not c.data.startswith(("edit_category_", "delete_category_", "set_role_")))
async def process_callback(
    callback_query: CallbackQuery, state: FSMContext
) -> None:
    logger.info(f"User:{callback_query.from_user.id} Query: {callback_query.data}")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    if callback_query.data in ["my_orders_buyer", "my_orders_seller"]:
        return

    if callback_query.data == "buy_item":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        item_id = state_data.get("id")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            item_id=item_id
        )
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
        await callback_query.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
        )
        await state.set_state(register.Register.ADDRESS)
        return

    elif callback_query.data == "view_all_items":
        keyboard = await get_all_items(host=API_HOST, show_unsold=False)
        await callback_query.message.edit_text(
            "üìä –í—Å–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=keyboard
        )
        return

    elif callback_query.data == "view_unsold_items":
        keyboard = await get_all_items(host=API_HOST, show_unsold=True)
        await callback_query.message.edit_text(
            "üìä –ù–µ–ø—Ä–æ–¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=keyboard
        )
        return

    elif callback_query.data.startswith("next_page_"):
        page = int(callback_query.data.split("_")[2])
        if "view_all_items" in callback_query.message.text:
            keyboard = await get_all_items(host=API_HOST, page=page, show_unsold=False)
        elif "view_unsold_items" in callback_query.message.text:
            keyboard = await get_all_items(host=API_HOST, page=page, show_unsold=True)
        else:
            keyboard = await get_users_ads(callback_query.from_user.id, API_HOST, page)
        await callback_query.message.edit_reply_markup(reply_markup=keyboard)
        return

    elif callback_query.data.startswith("prev_page_"):
        page = int(callback_query.data.split("_")[2])
        if "view_all_items" in callback_query.message.text:
            keyboard = await get_all_items(host=API_HOST, page=page, show_unsold=False)
        elif "view_unsold_items" in callback_query.message.text:
            keyboard = await get_all_items(host=API_HOST, page=page, show_unsold=True)
        else:
            keyboard = await get_users_ads(callback_query.from_user.id, API_HOST, page)
        await callback_query.message.edit_reply_markup(reply_markup=keyboard)
        return

    elif callback_query.data == "create_ad":
        message = await get_item_menu(callback_query, state)
        await state.update_data(message=message)
    elif callback_query.data == "back_to_menu":
        await state.set_state(None)
        await state.clear()
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_HOST}/api/api/users/telegram/{callback_query.from_user.id}/id") as id_response:
                if id_response.status == 200:
                    user_id = await id_response.json()
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID
                    async with session.get(f"{API_HOST}/api/api/users/{user_id}") as user_response:
                        if user_response.status == 200:
                            user_data = await user_response.json()
                            role = user_data.get("role", {}).get("name", "buyer")
                            await callback_query.bot.delete_message(
                                callback_query.message.chat.id, callback_query.message.message_id
                            )
                            await callback_query.bot.send_message(
                                chat_id=callback_query.message.chat.id,
                                text=f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá",
                                reply_markup=await main_menu(role=role),
                            )
                        else:
                            await callback_query.answer(
                                text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                show_alert=True,
                            )
                else:
                    await callback_query.answer(
                        text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        show_alert=True,
                    )
    elif callback_query.data == "my_ads":
        await state.set_data({"page": 1})
        await callback_query.message.edit_text(
            text="–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
            reply_markup=await get_users_ads(callback_query.from_user.id, API_HOST),
        )
        await state.set_state(Edit.CHOICE)
    elif callback_query.data == "view_ads":
        await state.update_data(
            current_page=1,
            current_category=None,
            current_filter_type=None,
            current_filter_value=None
        )
        await callback_query.message.edit_text(
            text="üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
            reply_markup=await get_ads_with_filters(API_HOST)
        )
    elif callback_query.data == "show_filters":
        await callback_query.message.edit_text(
            text="üîç –§–∏–ª—å—Ç—Ä—ã",
            reply_markup=await get_filter_menu()
        )
    elif callback_query.data.startswith("filter_"):
        filter_data = callback_query.data.split("_")[1]
        state_data = await state.get_data()
        current_page = state_data.get("current_page", 1)
        current_category = state_data.get("current_category")
        current_filter_type = state_data.get("current_filter_type")
        current_filter_value = state_data.get("current_filter_value")
        
        logger.info(f"Processing filter: {filter_data}")
        logger.info(f"Current state before update: page={current_page}, category={current_category}, filter_type={current_filter_type}, filter_value={current_filter_value}")
        
        if filter_data == "date":
            await state.update_data(current_filter_type="date", current_filter_value=None)
            current_filter_type = "date"
            current_filter_value = None
        elif filter_data == "asc":
            await state.update_data(current_filter_type="price", current_filter_value="asc")
            current_filter_type = "price"
            current_filter_value = "asc"
        elif filter_data == "desc":
            await state.update_data(current_filter_type="price", current_filter_value="desc")
            current_filter_type = "price"
            current_filter_value = "desc"
        elif filter_data == "reset":
            await state.update_data(
                current_filter_type=None,
                current_filter_value=None
            )
            current_filter_type = None
            current_filter_value = None
        
        logger.info(f"Updated state: page={current_page}, category={current_category}, filter_type={current_filter_type}, filter_value={current_filter_value}")
        
        await callback_query.message.edit_text(
            text="üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
            reply_markup=await get_ads_with_filters(
                API_HOST,
                current_page,
                current_category,
                current_filter_type,
                current_filter_value
            )
        )
    elif callback_query.data == "back_to_ads":
        state_data = await state.get_data()
        current_page = state_data.get("current_page", 1)
        current_category = state_data.get("current_category")
        current_filter_type = state_data.get("current_filter_type")
        current_filter_value = state_data.get("current_filter_value")
        
        await callback_query.message.edit_text(
            text="üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
            reply_markup=await get_ads_with_filters(
                API_HOST,
                current_page,
                current_category,
                current_filter_type,
                current_filter_value
            )
        )
    elif callback_query.data.startswith("item_card_"):
        item_id = int(callback_query.data.split("_")[2])
        logger.info(f"Trying to get item with ID: {item_id} from {API_HOST}/api/api/items/{item_id}")
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_HOST}/api/api/items/{item_id}") as response:
                logger.info(f"Response status: {response.status}")
                if response.status == 200:
                    item = await response.json()
                    logger.info(f"Received item data: {item}")
                    item["update"] = True
                    if "image" in item and item["image"]:
                        item["image"] = item["image"].split("/api/")[-1]
                    await state.set_data(item)
                    message = await get_item_menu(
                        callback_query, state, photo=item.get("photo"), update=True, host=API_HOST
                    )
                    await state.update_data(message=message)
                    await state.set_state(Add.MAIN)
                else:
                    error_text = await response.text()
                    logger.error(f"Error getting item: {error_text}")
                    await callback_query.bot.answer_callback_query(
                        callback_query.id,
                        text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ",
                        show_alert=True,
                    )

@router.callback_query(Edit.CHOICE)
async def process_callback(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data.startswith("item_card_"):
        item_id = int(callback_query.data.split("_")[2])
        logger.info(f"Trying to get item with ID: {item_id} from {API_HOST}/api/api/items/{item_id}")
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_HOST}/api/api/items/{item_id}") as response:
                logger.info(f"Response status: {response.status}")
                if response.status == 200:
                    item = await response.json()
                    logger.info(f"Received item data: {item}")
                    item["update"] = True
                    if "image" in item and item["image"]:
                        item["image"] = item["image"].split("/api/")[-1]
                    await state.set_data(item)
                    message = await get_item_menu(
                        callback_query, state, photo=item.get("photo"), update=True, host=API_HOST
                    )
                    await state.update_data(message=message)
                    await state.set_state(Add.MAIN)
                else:
                    error_text = await response.text()
                    logger.error(f"Error getting item: {error_text}")
                    await callback_query.bot.answer_callback_query(
                        callback_query.id,
                        text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ",
                        show_alert=True,
                    )
    elif callback_query.data == "back_to_menu":
        await state.set_state(None)
        await state.clear()
        await callback_query.bot.delete_message(
            callback_query.message.chat.id, callback_query.message.message_id
        )
        await callback_query.bot.send_message(
            chat_id=callback_query.message.chat.id,
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá",
            reply_markup=await main_menu(),
        )

@router.callback_query(lambda c: c.data.startswith("filter_"))
async def process_filters(callback_query: CallbackQuery, state: FSMContext):
    logger.info(f"Filter button pressed: {callback_query.data}")
    filter_data = callback_query.data.split("_")[1]
    
    state_data = await state.get_data()
    current_page = state_data.get("current_page", 1)
    current_category = state_data.get("current_category")
    current_filter_type = state_data.get("current_filter_type")
    current_filter_value = state_data.get("current_filter_value")
    
    logger.info(f"Current state: page={current_page}, category={current_category}, filter_type={current_filter_type}, filter_value={current_filter_value}")
    
    if filter_data == "date":
        await state.update_data(current_filter_type="date")
        await callback_query.message.edit_text(
            text="üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
            reply_markup=await get_ads_with_filters(
                API_HOST,
                current_page,
                current_category,
                "date",
                current_filter_value
            )
        )
    elif filter_data == "asc":
        await state.update_data(current_filter_value="asc")
        await callback_query.message.edit_text(
            text="üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
            reply_markup=await get_ads_with_filters(
                API_HOST,
                current_page,
                current_category,
                current_filter_type,
                "asc"
            )
        )
    elif filter_data == "desc":
        await state.update_data(current_filter_value="desc")
        await callback_query.message.edit_text(
            text="üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
            reply_markup=await get_ads_with_filters(
                API_HOST,
                current_page,
                current_category,
                current_filter_type,
                "desc"
            )
        )
    elif filter_data == "reset":
        await state.update_data(
            current_filter_type=None,
            current_filter_value=None
        )
        await callback_query.message.edit_text(
            text="üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
            reply_markup=await get_ads_with_filters(
                API_HOST,
                current_page,
                current_category
            )
        )
    
    logger.info("Filter processing completed")

@router.callback_query(lambda c: c.data.startswith(("next_page_", "prev_page_")))
async def process_pagination(callback_query: CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split("_")[2])
    state_data = await state.get_data()
    current_category = state_data.get("current_category")
    current_filter_type = state_data.get("current_filter_type")
    current_filter_value = state_data.get("current_filter_value")
    
    await state.update_data(current_page=page)
    
    await callback_query.message.edit_text(
        text="üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
        reply_markup=await get_ads_with_filters(
            API_HOST,
            page,
            current_category,
            current_filter_type,
            current_filter_value
        )
    )

@router.callback_query(lambda c: c.data == "back_to_ads")
async def back_to_ads(callback_query: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    current_page = state_data.get("current_page", 1)
    current_category = state_data.get("current_category")
    current_filter_type = state_data.get("current_filter_type")
    current_filter_value = state_data.get("current_filter_value")
    
    await callback_query.message.edit_reply_markup(
        reply_markup=await get_ads_with_filters(
            API_HOST,
            current_page,
            current_category,
            current_filter_type,
            current_filter_value
        )
    )

@router.message(register.Register.ADDRESS)
async def process_address(message: Message, state: FSMContext) -> None:
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    state_data = await state.get_data()
    item_id = state_data.get("id")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º id –∏–∑ state_data
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    try:
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with session.get(f"{API_HOST}/api/api/users/telegram/{message.from_user.id}/id") as id_response:
                if id_response.status != 200:
                    await message.answer(
                        text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                    return
                user_id = await id_response.json()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
            async with session.get(f"{API_HOST}/api/api/items/{item_id}") as item_response:
                if item_response.status != 200:
                    await message.answer(
                        text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                    return
                item_data = await item_response.json()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
            async with session.get(f"{API_HOST}/api/api/users/{item_data.get('user_id')}") as seller_response:
                if seller_response.status != 200:
                    await message.answer(
                        text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–≤—Ü–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                    return
                seller_data = await seller_response.json()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            order_data = {
                "item_id": item_id,
                "buyer_id": user_id,
                "seller_id": item_data.get("user_id"),
                "buyer_telegram_id": message.from_user.id,
                "seller_telegram_id": seller_data.get("telegram_id"),
                "buyer_phone": state_data.get("contact"),
                "seller_phone": seller_data.get("contact"),
                "delivery_address": message.text,
                "total": float(item_data.get("price", 0)),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                "status": "CREATED"  # –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            }
            
            async with session.post(f"{API_HOST}/api/api/orders/", json=order_data) as response:
                if response.status != 200:
                    error_text = await response.text()
                    logger.error(f"Error creating order: {error_text}")
                    await message.answer(
                        text="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                    return
                
                order = await response.json()
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑",
                                callback_data=f"pay_order_{order['id']}"
                            )
                        ]
                    ]
                )
                
                await message.answer(
                    text=f"–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
                         f"ID –∑–∞–∫–∞–∑–∞: {order['id']}\n"
                         f"–°—Ç–∞—Ç—É—Å: {order['status']}\n"
                         f"–°—É–º–º–∞: {order['total']}\n"
                         f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {message.text}",
                    reply_markup=keyboard
                )
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.set_state(None)
                await state.clear()
    except Exception as e:
        logger.error(f"Error creating order: {e}")
        await message.answer(
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@router.callback_query(lambda c: c.data.startswith("update_order_status_"))
async def update_order_status(callback_query: CallbackQuery, state: FSMContext) -> None:
    order_id = int(callback_query.data.split("_")[3])
    new_status = callback_query.data.split("_")[4]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º
    if new_status not in ["CREATED", "PAID"]:
        await callback_query.answer(
            text="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞",
            show_alert=True
        )
        return
    
    try:
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
            async with session.get(f"{API_HOST}/api/api/orders/{order_id}") as order_response:
                if order_response.status != 200:
                    await callback_query.answer(
                        text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞",
                        show_alert=True
                    )
                    return
                order_data = await order_response.json()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            update_data = {
                "status": new_status,
                "location": order_data.get("location", "CREATED")
            }
            
            async with session.patch(
                f"{API_HOST}/api/api/orders/{order_id}",
                json=update_data
            ) as response:
                if response.status != 200:
                    await callback_query.answer(
                        text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞",
                        show_alert=True
                    )
                    return
                
                await callback_query.answer(
                    text="–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
                    show_alert=True
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
                await callback_query.message.edit_text(
                    text=f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {new_status}"
                )
    except Exception as e:
        logger.error(f"Error updating order status: {e}")
        await callback_query.answer(
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞",
            show_alert=True
        )

@router.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback_query: CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_HOST}/api/api/users/telegram/{callback_query.from_user.id}/role") as response:
                if response.status == 200:
                    role = await response.json()
                    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    markup = await main_menu(role)
                    await callback_query.message.edit_text(
                        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        reply_markup=markup
                    )
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    markup = await main_menu()
                    await callback_query.message.edit_text(
                        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        reply_markup=markup
                    )
    except Exception as e:
        logger.error(f"Error in back_to_menu: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        markup = await main_menu()
        await callback_query.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=markup
        )

@router.callback_query(lambda c: c.data == "show_statistics")
async def show_statistics(callback_query: CallbackQuery, state: FSMContext):
    logger.info("Starting show_statistics handler")
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        logger.info(f"Making request to {API_HOST}/api/api/statistics/")
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_HOST}/api/api/statistics/") as response:
                logger.info(f"Got response with status {response.status}")
                if response.status == 200:
                    stats = await response.json()
                    logger.info(f"Received statistics: {stats}")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
                    last_updated = datetime.fromisoformat(stats["last_updated"].replace("Z", "+00:00"))
                    formatted_date = last_updated.strftime("%d.%m.%Y %H:%M:%S")
                    
                    stats_message = (
                        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞\n\n"
                        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
                        f"üõçÔ∏è –ü—Ä–æ–¥–∞–≤—Ü–æ–≤: {stats['total_sellers']} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_sellers']})\n"
                        f"üõí –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {stats['total_buyers']} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_buyers']})\n\n"
                        f"üì¶ –ó–∞–∫–∞–∑—ã:\n"
                        f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_orders']}\n"
                        f"‚Ä¢ –ó–∞ –≥–æ–¥: {stats['yearly_orders']}\n"
                        f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {stats['monthly_orders']}\n\n"
                        f"üí∞ –ü—Ä–∏–±—ã–ª—å:\n"
                        f"‚Ä¢ –û–±—â–∞—è: {stats['total_profit']} RUB\n"
                        f"‚Ä¢ –ó–∞ –≥–æ–¥: {stats['yearly_profit']} RUB\n"
                        f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {stats['monthly_profit']} RUB\n\n"
                        f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {formatted_date}"
                    )
                    
                    logger.info("Preparing keyboard")
                    keyboard = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                    callback_data="back_to_menu"
                                )
                            ]
                        ]
                    )
                    
                    logger.info("Sending statistics message")
                    await callback_query.message.edit_text(
                        text=stats_message,
                        reply_markup=keyboard
                    )
                    logger.info("Statistics message sent successfully")
                else:
                    error_text = await response.text()
                    logger.error(f"Error getting statistics. Status: {response.status}, Response: {error_text}")
                    await callback_query.answer(
                        text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                        show_alert=True
                    )
    except Exception as e:
        logger.error(f"Error in show_statistics: {str(e)}")
        logger.exception("Full exception details:")
        await callback_query.answer(
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            show_alert=True
        )

@router.callback_query(lambda c: c.data == "manage_categories")
async def show_categories(callback_query: CallbackQuery, state: FSMContext):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_HOST}/api/api/categories/") as response:
                if response.status == 200:
                    categories = await response.json()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    message_text = "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n\n"
                    if categories:
                        for category in categories:
                            message_text += f"‚Ä¢ {category['name']} (ID: {category['id']})\n"
                    else:
                        message_text += "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    keyboard = [
                        [
                            InlineKeyboardButton(
                                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                                callback_data="add_category"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                                callback_data="edit_category"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                                callback_data="delete_category"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                callback_data="back_to_menu"
                            )
                        ]
                    ]
                    
                    await callback_query.message.edit_text(
                        text=message_text,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                    )
                else:
                    await callback_query.answer(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                        show_alert=True
                    )
    except Exception as e:
        logger.error(f"Error in show_categories: {str(e)}")
        await callback_query.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            show_alert=True
        )

@router.callback_query(lambda c: c.data == "add_category")
async def add_category_start(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –û—Ç–º–µ–Ω–∞",
                        callback_data="manage_categories"
                    )
                ]
            ]
        )
    )
    await state.set_state(CategoryStates.adding_name)

@router.message(CategoryStates.adding_name)
async def add_category_process(message: Message, state: FSMContext):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{API_HOST}/api/api/categories/",
                json={"name": message.text}
            ) as response:
                if response.status == 200:
                    await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        await state.clear()
        await show_categories_message(message)
    except Exception as e:
        logger.error(f"Error in add_category_process: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

@router.callback_query(lambda c: c.data == "edit_category")
async def edit_category_start(callback_query: CallbackQuery, state: FSMContext):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_HOST}/api/api/categories/") as response:
                if response.status == 200:
                    categories = await response.json()
                    keyboard = []
                    
                    for category in categories:
                        keyboard.append([
                            InlineKeyboardButton(
                                text=f"‚úèÔ∏è {category['name']}",
                                callback_data=f"edit_category_{category['id']}"
                            )
                        ])
                    
                    keyboard.append([
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="manage_categories"
                        )
                    ])
                    
                    await callback_query.message.edit_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                    )
                else:
                    await callback_query.answer(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                        show_alert=True
                    )
    except Exception as e:
        logger.error(f"Error in edit_category_start: {str(e)}")
        await callback_query.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            show_alert=True
        )

@router.callback_query(lambda c: c.data.startswith("edit_category_"))
async def edit_category_name(callback_query: CallbackQuery, state: FSMContext):
    category_id = int(callback_query.data.split("_")[2])
    await state.update_data(editing_category_id=category_id)
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –û—Ç–º–µ–Ω–∞",
                        callback_data="manage_categories"
                    )
                ]
            ]
        )
    )
    await state.set_state(CategoryStates.editing_name)

@router.message(CategoryStates.editing_name)
async def edit_category_process(message: Message, state: FSMContext):
    try:
        state_data = await state.get_data()
        category_id = state_data.get("editing_category_id")
        
        async with aiohttp.ClientSession() as session:
            async with session.put(
                f"{API_HOST}/api/api/categories/{category_id}",
                json={"name": message.text}
            ) as response:
                if response.status == 200:
                    await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        await state.clear()
        await show_categories_message(message)
    except Exception as e:
        logger.error(f"Error in edit_category_process: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

@router.callback_query(lambda c: c.data == "delete_category")
async def delete_category_start(callback_query: CallbackQuery, state: FSMContext):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_HOST}/api/api/categories/") as response:
                if response.status == 200:
                    categories = await response.json()
                    keyboard = []
                    
                    for category in categories:
                        keyboard.append([
                            InlineKeyboardButton(
                                text=f"‚ùå {category['name']}",
                                callback_data=f"delete_category_{category['id']}"
                            )
                        ])
                    
                    keyboard.append([
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="manage_categories"
                        )
                    ])
                    
                    await callback_query.message.edit_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                    )
                else:
                    await callback_query.answer(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                        show_alert=True
                    )
    except Exception as e:
        logger.error(f"Error in delete_category_start: {str(e)}")
        await callback_query.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            show_alert=True
        )

@router.callback_query(lambda c: c.data.startswith("delete_category_"))
async def delete_category_confirm(callback_query: CallbackQuery, state: FSMContext):
    try:
        category_id = int(callback_query.data.split("_")[2])
        async with aiohttp.ClientSession() as session:
            async with session.delete(f"{API_HOST}/api/api/categories/{category_id}") as response:
                if response.status == 200:
                    await callback_query.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
                else:
                    await callback_query.answer(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                        show_alert=True
                    )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await show_categories(callback_query, state)
    except Exception as e:
        logger.error(f"Error in delete_category_confirm: {str(e)}")
        await callback_query.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            show_alert=True
        )

async def show_categories_message(message: Message):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_HOST}/api/api/categories/") as response:
                if response.status == 200:
                    categories = await response.json()
                    
                    message_text = "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n\n"
                    if categories:
                        for category in categories:
                            message_text += f"‚Ä¢ {category['name']} (ID: {category['id']})\n"
                    else:
                        message_text += "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
                    
                    keyboard = [
                        [
                            InlineKeyboardButton(
                                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                                callback_data="add_category"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                                callback_data="edit_category"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                                callback_data="delete_category"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                callback_data="back_to_menu"
                            )
                        ]
                    ]
                    
                    await message.answer(
                        text=message_text,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                    )
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    except Exception as e:
        logger.error(f"Error in show_categories_message: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(lambda c: c.data == "manage_users")
async def show_users(callback_query: CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        async with aiohttp.ClientSession() as session:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
            async with session.get(f"{API_HOST}/api/api/users/roles/") as roles_response:
                if roles_response.status != 200:
                    await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π", show_alert=True)
                    return
                roles = await roles_response.json()
                roles_dict = {role['id']: role['name'] for role in roles}

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with session.get(f"{API_HOST}/api/api/statistics/") as stats_response:
                if stats_response.status != 200:
                    await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)
                    return
                stats = await stats_response.json()
                total_users = stats['total_users']

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            message_text = "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
            message_text += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = [
                [
                    InlineKeyboardButton(
                        text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        callback_data="change_user_role"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="back_to_menu"
                    )
                ]
            ]

            await callback_query.message.edit_text(
                text=message_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )

    except Exception as e:
        logger.error(f"Error in show_users: {str(e)}")
        await callback_query.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            show_alert=True
        )

@router.callback_query(lambda c: c.data == "change_user_role")
async def change_user_role_start(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å—é —Ä–æ–ª—å —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="manage_users"
                    )
                ]
            ]
        )
    )
    await state.set_state(CategoryStates.editing_user_id)

@router.message(CategoryStates.editing_user_id)
async def process_user_id(message: Message, state: FSMContext):
    try:
        telegram_id = int(message.text)
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with session.get(f"{API_HOST}/api/api/users/telegram/{telegram_id}/exists") as exists_response:
                if exists_response.status != 200:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    await state.clear()
                    return
                exists = await exists_response.json()
                if not exists:
                    await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    await state.clear()
                    return

            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with session.get(f"{API_HOST}/api/api/users/telegram/{telegram_id}/id") as id_response:
                if id_response.status != 200:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    await state.clear()
                    return
                user_id = await id_response.json()

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            async with session.get(f"{API_HOST}/api/api/users/{user_id}") as user_response:
                if user_response.status != 200:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    await state.clear()
                    return
                user_data = await user_response.json()

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π
            async with session.get(f"{API_HOST}/api/api/users/roles/") as roles_response:
                if roles_response.status != 200:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π")
                    await state.clear()
                    return
                roles = await roles_response.json()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(user_id=user_id)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
            keyboard = []
            current_role = user_data.get('role', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            for role in roles:
                if role['name'] != current_role:  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å
                    keyboard.append([
                        InlineKeyboardButton(
                            text=f"üë§ {role['name']}",
                            callback_data=f"set_role_{role['id']}"
                        )
                    ])

            keyboard.append([
                InlineKeyboardButton(
                    text="üîô –û—Ç–º–µ–Ω–∞",
                    callback_data="manage_users"
                )
            ])

            await message.answer(
                f"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_role}\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )

    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        await state.clear()
    except Exception as e:
        logger.error(f"Error in process_user_id: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        await state.clear()

@router.callback_query(lambda c: c.data.startswith("set_role_"))
async def set_user_role(callback_query: CallbackQuery, state: FSMContext):
    try:
        role_id = int(callback_query.data.split("_")[2])
        state_data = await state.get_data()
        user_id = state_data.get('user_id')

        if not user_id:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        async with aiohttp.ClientSession() as session:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with session.put(
                f"{API_HOST}/api/api/users/{user_id}/role/{role_id}"
            ) as response:
                if response.status == 200:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
                    async with session.get(f"{API_HOST}/api/api/users/roles/") as roles_response:
                        roles = await roles_response.json()
                        role_name = next((role['name'] for role in roles if role['id'] == role_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    
                    await callback_query.answer(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {role_name}", show_alert=True)
                    await state.clear()
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                    await show_users(callback_query, state)
                else:
                    error_text = await response.text()
                    logger.error(f"Error updating user role: {error_text}")
                    await callback_query.answer(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        show_alert=True
                    )

    except Exception as e:
        logger.error(f"Error in set_user_role: {str(e)}")
        await callback_query.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏",
            show_alert=True
        )
        await state.clear()
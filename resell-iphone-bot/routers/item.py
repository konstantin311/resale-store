from uuid import uuid4
import os

import aiohttp
import phonenumbers
from aiogram import Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from loguru import logger

from models.item import Item
from states.item import Add
from templates.item import (
    save,
    get_item_menu,
    get_categories_buttons,
    contact,
    get_currency_buttons,
)
from templates.main import main_menu
from config import API_HOST

router = Router()


@router.callback_query(Add.MAIN)
async def process_callback(callback_query: CallbackQuery, state: FSMContext):
    names = {
        "item_name": "–ù–∞–∑–≤–∞–Ω–∏–µ",
        "item_price": "–¶–µ–Ω–∞",
        "item_currency": "–í–∞–ª—é—Ç–∞",
        "item_category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        "item_contact": "–ö–æ–Ω—Ç–∞–∫—Ç",
        "item_description": "–û–ø–∏—Å–∞–Ω–∏–µ",
        "item_photo": "–§–æ—Ç–æ"
    }
    logger.info(f"User:{callback_query.from_user.id} Query: {callback_query.data}")
    await logger.complete()
    if callback_query.data == "back_to_menu":
        await state.set_state(None)
        await state.clear()
        await callback_query.bot.delete_message(
            callback_query.message.chat.id, callback_query.message.message_id
        )
        await callback_query.bot.send_message(
            chat_id=callback_query.message.chat.id,
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá",
            reply_markup=await main_menu(),
        )
    elif callback_query.data.startswith("item_"):
        states = {
            "item_name": Add.NAME,
            "item_category": Add.CATEGORY,
            "item_price": Add.PRICE,
            "item_phone_number": Add.CONTACT,
            "item_photo": Add.PHOTO,
            "item_contact": Add.CONTACT,
            "item_description": Add.DESCRIPTION,
        }
        await state.set_state(states[callback_query.data])

        if callback_query.data == "item_category":
            await callback_query.message.edit_caption(
                caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                reply_markup=await get_categories_buttons(),
            )
        elif callback_query.data == "item_contact":
            await callback_query.message.edit_caption(
                caption="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n* –æ–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
                reply_markup=await contact(),
            )
        elif callback_query.data == "item_photo":
            await callback_query.message.edit_caption(
                caption="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞\n* –æ–Ω–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
                reply_markup=await save(),
            )
        else:
            await callback_query.message.edit_caption(
                caption=f"–í–≤–µ–¥–∏—Ç–µ {names[callback_query.data].lower()}\n* –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è",
                reply_markup=await save(),
            )
    elif callback_query.data == "upload":
        data = await state.get_data()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ["name", "price", "currency", "category", "contact", "description", "image"]
        missing_fields = [field for field in required_fields if field not in data]
        if missing_fields:
            await callback_query.answer(
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è: {', '.join(missing_fields)}",
                show_alert=True
            )
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            async with aiohttp.ClientSession() as session:
                try:
                    async with session.get(f"{API_HOST}/api/api/v1/health-check") as response:
                        if response.status != 200:
                            raise Exception("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                        response_data = await response.json()
                        if response_data.get("status") != "ok" or response_data.get("database") != "connected":
                            raise Exception("API –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                except Exception as e:
                    logger.error(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
                    await callback_query.answer(
                        "–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                        show_alert=True
                    )
                    return

            # –°–æ–∑–¥–∞–µ–º FormData
            form_data = aiohttp.FormData()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è –≤ —Ñ–æ—Ä–º—É
            form_data.add_field('name', data["name"])
            form_data.add_field('price', str(data["price"]))
            form_data.add_field('currency', data["currency"])
            form_data.add_field('category', data["category_name"])
            form_data.add_field('contact', data["contact"])
            form_data.add_field('description', data["description"])
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if "image" in data:
                image_path = data["image"]
                logger.info(f"Processing image: {image_path}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                if not os.path.exists(image_path):
                    logger.error(f"Image file not found: {image_path}")
                    await callback_query.answer(
                        "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        show_alert=True
                    )
                    return
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                file_size = os.path.getsize(image_path)
                if file_size > 10 * 1024 * 1024:  # 10MB
                    logger.error(f"Image file too large: {file_size} bytes")
                    await callback_query.answer(
                        "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π",
                        show_alert=True
                    )
                    return
                
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º—É
                    form_data.add_field(
                        'image',
                        open(image_path, 'rb'),
                        filename=os.path.basename(image_path),
                        content_type='image/jpeg'
                    )
                    logger.info(f"Image added to form data: {image_path}")
                except Exception as e:
                    logger.error(f"Error adding image to form data: {str(e)}")
                    await callback_query.answer(
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                        show_alert=True
                    )
                    return
            else:
                logger.info("No image provided, sending request without image")

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            logger.info(f"Current state data: {data}")
            logger.info(f"Form data fields: {form_data._fields}")
            logger.info(f"Sending request to: {API_HOST}/api/api/items/?telegram_id={callback_query.from_user.id}")
            await logger.complete()

            try:
                async with aiohttp.ClientSession() as session:
                    async with session.post(
                        f"{API_HOST}/api/api/items/?telegram_id={callback_query.from_user.id}",
                        data=form_data
                    ) as response:
                        response_text = await response.text()
                        logger.info(f"API Response status: {response.status}")
                        logger.info(f"API Response headers: {response.headers}")
                        logger.info(f"API Response text: {response_text}")
                        
                        if response.status == 200:
                            await callback_query.answer(
                                "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ",
                                show_alert=True
                            )
                            await state.set_state(None)
                            await state.clear()
                            await callback_query.message.delete()
                            await callback_query.bot.send_message(
                                chat_id=callback_query.message.chat.id,
                                text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá",
                                reply_markup=await main_menu(),
                            )
                        else:
                            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {response_text}"
                            logger.error(error_msg)
                            await callback_query.answer(
                                error_msg,
                                show_alert=True
                            )
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ API: {str(e)}"
                logger.error(error_msg)
                await callback_query.answer(
                    error_msg,
                    show_alert=True
                )
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {str(e)}"
            logger.error(error_msg)
            await callback_query.answer(
                error_msg,
                show_alert=True
            )
    elif callback_query.data == "save":
        data = await state.get_data()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = ["name", "price", "currency", "category", "contact", "description"]
            missing_fields = [field for field in required_fields if field not in data or data[field] is None]
            
            if missing_fields:
                await callback_query.bot.answer_callback_query(
                    callback_query.id,
                    text=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è: {', '.join(missing_fields)}",
                    show_alert=True,
                )
                return

            # –°–æ–∑–¥–∞–µ–º FormData
            form_data = aiohttp.FormData()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è –≤ —Ñ–æ—Ä–º—É
            form_data.add_field('name', str(data["name"]))
            form_data.add_field('price', str(data["price"]))
            form_data.add_field('currency', str(data["currency"]))
            form_data.add_field('category', str(data["category"]))
            form_data.add_field('contact', str(data["contact"]))
            form_data.add_field('description', str(data["description"]))
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if "image" in data and data["image"]:
                image_path = data["image"]
                if os.path.exists(image_path):
                    form_data.add_field(
                        'image',
                        open(image_path, 'rb'),
                        filename=os.path.basename(image_path),
                        content_type='image/jpeg'
                    )
            
            logger.info(f"Sending update data with FormData")
            
        except Exception as e:
            logger.error(f"Error preparing update data: {str(e)}")
            await callback_query.bot.answer_callback_query(
                callback_query.id,
                text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
                show_alert=False,
            )
            return
        else:
            async with aiohttp.ClientSession() as session:
                async with session.patch(
                    f"{API_HOST}/api/api/items/{data['id']}", data=form_data
                ) as response:
                    status = response.status
                    if status != 204:
                        error_text = await response.text()
                        logger.error(f"Error updating item: {error_text}")
            if status == 204:
                await callback_query.bot.answer_callback_query(
                    callback_query.id,
                    text="–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
                    show_alert=True,
                )
                await callback_query.message.delete()
                await callback_query.bot.send_message(
                    chat_id=callback_query.message.chat.id,
                    text=f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá",
                    reply_markup=await main_menu(),
                )
                await state.set_state(None)
                await state.clear()
            else:
                await callback_query.bot.answer_callback_query(
                    callback_query.id,
                    text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
                    show_alert=False,
                )

    elif callback_query.data == "delete":
        data = await state.get_data()
        async with aiohttp.ClientSession() as session:
            async with session.delete(f"{API_HOST}/api/api/items/{data['id']}") as response:
                status = response.status
        if status == 204:
            await callback_query.bot.answer_callback_query(
                callback_query.id,
                text="–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
                show_alert=True,
            )
        else:
            await callback_query.bot.answer_callback_query(
                callback_query.id,
                text="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
                show_alert=False,
            )
            return

        await callback_query.message.delete()
        await callback_query.bot.send_message(
            chat_id=callback_query.message.chat.id,
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá",
            reply_markup=await main_menu(),
        )
        await state.set_state(None)
        await state.clear()


@router.callback_query(
    StateFilter(Add.NAME, Add.PRICE, Add.CONTACT, Add.PHOTO, Add.DESCRIPTION)
)
async def process_attr_callback(
    callback_query: CallbackQuery, state: FSMContext
):
    logger.info(f"User:{callback_query.from_user.id} Query: {callback_query.data}")
    await logger.complete()
    if callback_query.data == "default_contact":
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
            async with session.get(
                f"{API_HOST}/api/api/users/telegram/{callback_query.from_user.id}/exists"
            ) as response:
                if response.status == 200:
                    user_id = await response.json()
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ ID
                    async with session.get(
                        f"{API_HOST}/api/api/users/{user_id}"
                    ) as user_response:
                        if user_response.status == 200:
                            result = await user_response.json()
                            await state.update_data({"contact": result.get("contact")})
                            await callback_query.bot.answer_callback_query(
                                callback_query.id,
                                text=f"–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω",
                                show_alert=False,
                            )
                        else:
                            await callback_query.bot.answer_callback_query(
                                callback_query.id,
                                text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞",
                                show_alert=True,
                            )
                else:
                    await callback_query.bot.answer_callback_query(
                        callback_query.id,
                        text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        show_alert=True,
                    )
    else:
        await callback_query.bot.answer_callback_query(
            callback_query.id,
            text=f"{str(await state.get_state()).split(':')[1].capitalize()} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
            show_alert=False,
        )
    await get_item_menu(callback_query, state)
    await state.set_state(Add.MAIN)
    return


@router.callback_query(Add.CATEGORY)
async def process_category(callback_query: CallbackQuery, state: FSMContext):
    logger.info(f"User:{callback_query.from_user.id} Query: {callback_query.data}")
    await logger.complete()
    if callback_query.data != "create_ad":
        # –ü–æ–ª—É—á–∞–µ–º ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_id = callback_query.data.split("_")[1]
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
        for row in callback_query.message.reply_markup.inline_keyboard:
            for button in row:
                if button.callback_data == callback_query.data:
                    category_name = button.text.replace("üìå ", "")
                    break
        await state.update_data({
            "category": category_id,
            "category_name": category_name
        })
        await callback_query.bot.answer_callback_query(
            callback_query.id,
            text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
            show_alert=False,
        )
    await get_item_menu(callback_query, state)
    await state.set_state(Add.MAIN)
    return


@router.message(StateFilter(Add.NAME, Add.CATEGORY, Add.CONTACT, Add.DESCRIPTION))
async def process_attr_text(message: Message, state: FSMContext):
    logger.info(f"User:{message.from_user.id} Text: {message.text}")
    await logger.complete()
    if await state.get_state() == Add.PRICE:
        try:
            result = float(message.text)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            return
        else:
            await state.update_data(
                {str(await state.get_state()).split(":")[1].lower(): result}
            )
    elif await state.get_state() == Add.NAME:
        if len(message.text) > 30:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤")
            return
        elif len(message.text) < 3:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤")
            return
    elif await state.get_state() == Add.CONTACT:
        try:
            valid = phonenumbers.is_valid_number(phonenumbers.parse(message.text))
            if not valid:
                raise phonenumbers.phonenumberutil.NumberParseException
        except phonenumbers.phonenumberutil.NumberParseException:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            return await message.delete()
    await state.update_data(
        {str(await state.get_state()).split(":")[1].lower(): message.text}
    )
    await message.delete()
    data = await state.get_data()
    await data["message"].delete()
    await get_item_menu(data["message"], state)
    await state.set_state(Add.MAIN)


@router.message(StateFilter(Add.PRICE))
async def process_price(message: Message, state: FSMContext):
    logger.info(f"User:{message.from_user.id} Text: {message.text}")
    try:
        result = float(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    else:
        await state.update_data({"price": result})
    await logger.complete()
    data = await state.get_data()
    await message.delete()
    try:
        await message.bot.edit_message_caption(
            chat_id=message.chat.id,
            message_id=data["message"].message_id,
            caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
            reply_markup=await get_currency_buttons(),
        )
    except Exception as e:
        await data["message"].delete()
        await message.bot.send_photo(
            chat_id=message.chat.id,
            photo=data["image"],
            caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
            reply_markup=await get_currency_buttons(),
        )
    await state.set_state(Add.CURRENCY)
    return


@router.callback_query(Add.CURRENCY)
async def process_currency(callback_query: CallbackQuery, state: FSMContext):
    logger.info(f"User:{callback_query.from_user.id} Query: {callback_query.data}")
    await logger.complete()
    await state.update_data({"currency": callback_query.data.split("_")[1]})
    await get_item_menu(callback_query, state)
    await state.set_state(Add.MAIN)
    return


@router.message(
    StateFilter(Add.PHOTO),
)
async def process_photo(message: Message, state: FSMContext):
    if message.photo:
        photo = message.photo[-1]
        logger.info(f"Received photo with size: {photo.file_size} bytes")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if photo.file_size > 10 * 1024 * 1024:  # 10MB
            logger.warning(f"Photo too large: {photo.file_size} bytes")
            await message.answer(
                "–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 10MB",
                reply_markup=await save(),
            )
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        unique_filename = f"{uuid4()}.jpg"
        file_path = os.path.join("static", unique_filename)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        try:
            os.makedirs("static", exist_ok=True)
            if not os.access("static", os.W_OK):
                raise Exception("Directory 'static' is not writable")
        except Exception as e:
            logger.error(f"Error creating/accessing static directory: {str(e)}")
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=await save(),
            )
            return

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        try:
            file_id = photo.file_id
            file = await message.bot.get_file(file_id)
            file_path = file.file_path
            
            logger.info(f"Downloading photo to: {file_path}")
            await message.bot.download_file(file_path, f"static/{unique_filename}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            if not os.path.exists(f"static/{unique_filename}"):
                raise Exception("File was not saved successfully")
                
            await state.update_data(image=f"static/{unique_filename}")
            logger.info(f"Photo successfully saved as: static/{unique_filename}")
            
            await message.answer(
                "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ",
                reply_markup=await save(),
            )
        except Exception as e:
            logger.error(f"Error saving photo: {str(e)}")
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=await save(),
            )
            return
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ",
            reply_markup=await save(),
        )
    
    await logger.complete()
    await message.delete()
    data = await state.get_data()
    if "message" in data:
        await data["message"].delete()
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π callback_query –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        temp_callback = type('obj', (object,), {
            'message': data["message"],
            'bot': message.bot,
            'delete': lambda: None
        })
        await get_item_menu(temp_callback, state)
    await state.set_state(Add.MAIN)

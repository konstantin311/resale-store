import aiohttp
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    WebAppInfo,
    CallbackQuery,
    InputMediaPhoto,
)
from aiogram.fsm.context import FSMContext
from loguru import logger


async def contact_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã", request_contact=True)]]
    markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    return markup


async def main_menu(role: str = "buyer") -> InlineKeyboardMarkup:
    keyboard = []
    
    # –î–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
    if role in ["seller", "admin"]:
        keyboard.extend([
            [InlineKeyboardButton(text="üì¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="create_ad")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="my_ads")],
            [InlineKeyboardButton(text="üõçÔ∏è –ú–æ–∏ –∑–∞–∫–∞–∑—ã (–∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü)", callback_data="my_orders_seller")],
        ])
    
    # –î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    keyboard.append([InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã (–∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å)", callback_data="my_orders_buyer")])
    
    # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if role == "admin":
        keyboard.extend([
            [InlineKeyboardButton(text="üìä –í—Å–µ —Ç–æ–≤–∞—Ä—ã", callback_data="view_all_items")],
            [InlineKeyboardButton(text="üìä –ù–µ–ø—Ä–æ–¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", callback_data="view_unsold_items")],
            [
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞",
                    callback_data="show_statistics"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏",
                    callback_data="manage_categories"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                    callback_data="manage_users"
                )
            ],
        ])
    
    # –î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    if role != "admin":
        keyboard.append([
            InlineKeyboardButton(
                text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
                callback_data="view_ads",
            )
        ])
    
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    return markup


def get_main_menu() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="üì¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="create_ad")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="my_ads")],
        [
            InlineKeyboardButton(
                text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
                callback_data="view_ads",
            )
        ],
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    return markup


async def get_users_ads(telegram_id: int, host: str, page: int = 1) -> InlineKeyboardMarkup:
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{host}/api/api/users/telegram/{telegram_id}/id"
            ) as response:
                if response.status != 200:
                    return InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
                        ]
                    )
                user_id = await response.json()

        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{host}/api/api/items/unsold/by_user/{user_id}?page={page}"
            ) as response:
                if response.status != 200:
                    return InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
                        ]
                    )
                result = await response.json()

        keyboard = [
            [
                InlineKeyboardButton(
                    text=f'üìå {item["name"]}', callback_data=f"item_card_{item['id']}"
                )
            ]
            for item in result.get("items", [])
        ]
        nav_keyboard = []
        if result.get("next_page", False):
            nav_keyboard.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                    callback_data=f"next_page_{page + 1}",
                )
            )
        if page > 1:
            nav_keyboard.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                    callback_data=f"prev_page_{page - 1}",
                )
            )
        keyboard += [
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        )


async def get_ads(
    host: str, page: int = 1, category: str = None
) -> InlineKeyboardMarkup:
    url = f"{host}/api/api/items/?page={page}"
    if category:
        url += f"&category={category}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            result = await response.json()
    keyboard = [
        [
            InlineKeyboardButton(
                text=f'üìå {item["name"]}', callback_data=f"view_item_{item['id']}"
            )
        ]
        for item in result.get("items", [])
    ]
    nav_keyboard = []
    if result.get("next_page", False):
        nav_keyboard.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                callback_data=f"next_page_{page + 1}",
            )
        )
    if page > 1:
        nav_keyboard.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                callback_data=f"prev_page_{page - 1}",
            )
        )
    keyboard += [
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")],
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    return markup


async def get_filter_menu() -> InlineKeyboardMarkup:
    logger.info("Creating filter menu")
    keyboard = [
        [InlineKeyboardButton(text="üìÖ –ü–æ –¥–∞—Ç–µ", callback_data="filter_date")],
        [
            InlineKeyboardButton(text="üí∞ –ü–æ —Ü–µ–Ω–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é", callback_data="filter_asc"),
            InlineKeyboardButton(text="üí∞ –ü–æ —Ü–µ–Ω–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é", callback_data="filter_desc")
        ],
        [InlineKeyboardButton(text="‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="filter_reset")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_ads")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def get_ads_with_filters(
    host: str,
    page: int = 1,
    category: str = None,
    filter_type: str = None,
    filter_value: str = None,
    show_all: bool = False
) -> InlineKeyboardMarkup:
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç unsold
    base_url = f"{host}/api/api/items/{'unsold' if not show_all else ''}"
    url = f"{base_url}?page={page}"
    
    if category:
        url += f"&category={category}"
    if filter_type:
        url += f"&filter_type={filter_type}"
    if filter_value:
        url += f"&filter_value={filter_value}"
    
    logger.info(f"Requesting ads with URL: {url}")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    logger.error(f"Error getting ads: {response.status}")
                    return InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
                        ]
                    )
                result = await response.json()
                logger.info(f"Received response: {result}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        keyboard = []
        if result.get("items"):
            for item in result.get("items", []):
                keyboard.append([
                    InlineKeyboardButton(
                        text=f'üìå {item["name"]} - {item["price"]} {item.get("currency", "")}',
                        callback_data=f"view_item_{item['id']}"
                    )
                ])
        else:
            keyboard.append([
                InlineKeyboardButton(
                    text="–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
                    callback_data="no_ads"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_keyboard = []
        if result.get("next_page", False):
            nav_keyboard.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                    callback_data=f"next_page_{page + 1}"
                )
            )
        if page > 1:
            nav_keyboard.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                    callback_data=f"prev_page_{page - 1}"
                )
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        keyboard.append([
            InlineKeyboardButton(
                text="üîç –§–∏–ª—å—Ç—Ä—ã",
                callback_data="show_filters"
            )
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        if nav_keyboard:
            keyboard.append(nav_keyboard)
        keyboard.append([
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                callback_data="back_to_menu"
            )
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"Error in get_ads_with_filters: {str(e)}")
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        )


async def get_all_items(host: str, page: int = 1, show_unsold: bool = False) -> InlineKeyboardMarkup:
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –Ω—É–∂–Ω—ã –ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ–¥–∞–Ω–Ω—ã–µ
        endpoint = "unsold" if show_unsold else ""
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{host}/api/api/items/{endpoint}?page={page}"
            ) as response:
                if response.status != 200:
                    return InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
                        ]
                    )
                result = await response.json()

        keyboard = [
            [
                InlineKeyboardButton(
                    text=f'üìå {item["name"]}', callback_data=f"item_card_{item['id']}"
                )
            ]
            for item in result.get("items", [])
        ]
        nav_keyboard = []
        if result.get("next_page", False):
            nav_keyboard.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                    callback_data=f"next_page_{page + 1}",
                )
            )
        if page > 1:
            nav_keyboard.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                    callback_data=f"prev_page_{page - 1}",
                )
            )
        keyboard += [
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        )



